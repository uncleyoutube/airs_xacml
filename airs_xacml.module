<?php
/**
 * Implements hook_islandora_object_ingested
 */
function airs_xacml_islandora_object_ingested($object) {
  $mods = new SimpleXMLElement($object['MODS']->getContent(''));
  airs_xacml_apply_policy($mods, $object);
}

/**
 * Implements hook_islandora_datastream_modified
 */

function airs_xacml_islandora_datastream_modified($object, $datastream) {
  $xmlPath = drupal_get_path('module', 'airs_xacml');
  if ($datastream->label === 'MODS Record') { 
    $mods = new SimpleXMLElement($object['MODS']->getContent(''));
    $dsid = 'POLICY';
    $datastream2 = isset($object[$dsid]) ? $object[$dsid] : $object->constructDatastream($dsid);
    $datastream2->label = 'XACML Policy Stream';
    $datastream2->mimeType = 'text/xml';
    $datastream2->setContentFromFile($xmlPath.'/XACML Policy Stream.xml');
    $object->ingestDatastream($datastream2);
    $object->refresh();
    airs_xacml_apply_policy($mods, $object);
  }
}

function airs_xacml_apply_policy($mods, $object) {
  // DECLARATIONS
  global $user;

  // decalaring $userAccess
  foreach ($mods->accessCondition as $access) {
    switch((string) $access['type']) {
    case 'restriction on access':
      $userAccess = (string)$access;
      break;
    }
  }

  // declaring $contributors
  $n=0;
  foreach ($mods->name as $name) {
    switch((string) $name['type']) {
    case 'personal':
      foreach($name->namePart as $namePart) {
        $contributors[$n] = (string)$namePart;
        $n++;
      }
      break;
    }
  }

  // declaring $themes
  $t=0;
  foreach ($mods->genre as $genre) {
    switch((string) $genre['type']) {
    case 'themes':
      $themes[$t] = (string)$genre;
      $t++;
      break;
    }
  }

  // create new IslandoraXacml object, link it to the object being ingested
  $xacml = new IslandoraXacml($object);

  // allow the user to view and manage the file
  // the administrative role gets this by default
  $xacml->viewingRule->addUser(array($object->owner, 'admin'));
  $xacml->managementRule->addUser(array($object->owner, 'administrator')); 

  if ($userAccess != 'User only') {
    // grabs all users listed as collaborators
    foreach ($contributors as $name) {
      $xacml->viewingRule->addUser(array($name));
      $xacml->managementRule->addUser(array($name));
    }

    // use the userAccess field of the form to determine extra permissions
    switch($userAccess) {
      case 'Public':
        dpm('public');
        $xacml->viewingRule->addRole(array('anonymous user', 'authenticated user'));
        if (airs_xacml_is_collection($object)) {
          $xacml->managementRule->addRole(array('Member'));
        }
        break;

      case 'Registered users':
        $xacml->viewingRule->addRole(array('authenticated user'));
        if (airs_xacml_is_collection($object)) {
          $xacml->managementRule->addRole(array('Member'));
        }
        break;

      case 'My sub-theme':
        // returns all themes listed in the AIRS Themes field
        foreach ($themes as $theme) {
          // checks if the listing is a string, then if begins with Subtheme
          if (is_string($theme) && strlen($theme) > 5) {
            if (substr($theme, 0, 8) == 'Subtheme') { 
              $subthemeID = 'st'.substr($theme, 9, 3); 
              $xacml->viewingRule->addRole(array($subthemeID));
              $xacml->managementRule->addRole(array($subthemeID));
            }
          } 
        }
      break;
    }
  }
  // save the policy
  $xacml->writeBackToFedora();
}

function airs_xacml_is_collection($object) {
  if (strcmp($object->models[0], 'islandora:collectionCModel') == 0) {
    return true;
  } else {
    return false;
  }
}
